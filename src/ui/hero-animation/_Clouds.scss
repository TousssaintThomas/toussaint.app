@use '../_styles/media' as *;

$clouds-top: url('/clouds-topFramed.svg');
$clouds-bottom-background: url('/clouds-bottom-background.svg');
$clouds-bottom-foreground: url('/CloudsBottomForground.svg');
$scroll-clouds: scroll-clouds 200s linear infinite;
$clouds-bottom-padding: 8.5em;

@mixin scroll-clouds($time) {
  animation: scroll-clouds #{time} linear infinite;
}

@mixin responsive-cloud(
  $scale-xs,
  $scale-sm,
  $scale-md,
  $scale-lg,
  $scale-xl,
  $side,
  $margin-xs,
  $margin-sm,
  $margin-md,
  $margin-lg,
  $margin-xl
) {
  --scale: 1;
  --clouds-width-base: 200vw;

  #{$side}: $margin-xl;

  @include media-down(xl) {
    --scale: #{$scale-xl};

    #{$side}: $margin-xl;
  }

  @include media-down(lg) {
    --scale: #{$scale-lg};

    #{$side}: $margin-lg;
  }

  @include media-down(md) {
    --scale: #{$scale-md};

    #{$side}: $margin-md;
  }

  @include media-down(sm) {
    --scale: #{$scale-sm};

    #{$side}: $margin-sm;
  }

  @include media-down(xs) {
    --scale: #{$scale-xs};

    #{$side}: $margin-xs;
  }

  --clouds-width: calc(var(--clouds-width-base) * var(--scale));

  width: var(--clouds-width);
}

@each $class, $image in (
  clouds-top: $clouds-top,
  clouds-bottom-background: $clouds-bottom-background,
  clouds-bottom-foreground: $clouds-bottom-foreground
) {
  .#{$class} {
    position: absolute;
    height: auto;
    display: flex;
    left: 0;
    will-change: transform;
    animation: $scroll-clouds;

    @if $class == clouds-top {
      @include responsive-cloud(3, 3.8, 3, 2.5, 1, top, 68px, 68px, 68px, 80px, 80px);
      @include scroll-clouds(200s);
    } @else {
      @include responsive-cloud(4, 3.8, 3, 3, 1, bottom, 1em, 2em, 7em, 7em, 6em);
      @include scroll-clouds(125s);
    }

    > div {
      background-repeat: repeat-x;
      background-size: 100%;
      width: 100%;
      background-image: $image;

      @if $class == clouds-top {
        height: 20em;
      } @else {
        height: 12em;
      }
    }
  }
}

@keyframes scroll-clouds {
  0% {
    transform: translateX(0);
  }

  100% {
    transform: translateX(calc(-100vw * var(--scale)));
  }
}